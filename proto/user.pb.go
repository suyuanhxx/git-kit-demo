// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserRequest struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	UserName             string   `protobuf:"bytes,2,opt,name=userName" json:"userName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserRequest) Reset()         { *m = UserRequest{} }
func (m *UserRequest) String() string { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()    {}
func (*UserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_8465edab245c7f12, []int{0}
}
func (m *UserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRequest.Unmarshal(m, b)
}
func (m *UserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRequest.Marshal(b, m, deterministic)
}
func (dst *UserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRequest.Merge(dst, src)
}
func (m *UserRequest) XXX_Size() int {
	return xxx_messageInfo_UserRequest.Size(m)
}
func (m *UserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserRequest proto.InternalMessageInfo

func (m *UserRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

type UserResponse struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	UserName             string   `protobuf:"bytes,2,opt,name=userName" json:"userName,omitempty"`
	Age                  int32    `protobuf:"varint,3,opt,name=age" json:"age,omitempty"`
	Sex                  int32    `protobuf:"varint,4,opt,name=sex" json:"sex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserResponse) Reset()         { *m = UserResponse{} }
func (m *UserResponse) String() string { return proto.CompactTextString(m) }
func (*UserResponse) ProtoMessage()    {}
func (*UserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_8465edab245c7f12, []int{1}
}
func (m *UserResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserResponse.Unmarshal(m, b)
}
func (m *UserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserResponse.Marshal(b, m, deterministic)
}
func (dst *UserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserResponse.Merge(dst, src)
}
func (m *UserResponse) XXX_Size() int {
	return xxx_messageInfo_UserResponse.Size(m)
}
func (m *UserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserResponse proto.InternalMessageInfo

func (m *UserResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserResponse) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UserResponse) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *UserResponse) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func init() {
	proto.RegisterType((*UserRequest)(nil), "proto.UserRequest")
	proto.RegisterType((*UserResponse)(nil), "proto.UserResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserService service

type UserServiceClient interface {
	GetUserInfo(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetUserInfo2(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (UserService_GetUserInfo2Client, error)
	GetUserInfo3(ctx context.Context, opts ...grpc.CallOption) (UserService_GetUserInfo3Client, error)
	GetUserInfo4(ctx context.Context, opts ...grpc.CallOption) (UserService_GetUserInfo4Client, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUserInfo(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/GetUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserInfo2(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (UserService_GetUserInfo2Client, error) {
	stream, err := grpc.NewClientStream(ctx, &_UserService_serviceDesc.Streams[0], c.cc, "/proto.UserService/GetUserInfo2", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetUserInfo2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_GetUserInfo2Client interface {
	Recv() (*UserResponse, error)
	grpc.ClientStream
}

type userServiceGetUserInfo2Client struct {
	grpc.ClientStream
}

func (x *userServiceGetUserInfo2Client) Recv() (*UserResponse, error) {
	m := new(UserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) GetUserInfo3(ctx context.Context, opts ...grpc.CallOption) (UserService_GetUserInfo3Client, error) {
	stream, err := grpc.NewClientStream(ctx, &_UserService_serviceDesc.Streams[1], c.cc, "/proto.UserService/GetUserInfo3", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetUserInfo3Client{stream}
	return x, nil
}

type UserService_GetUserInfo3Client interface {
	Send(*UserRequest) error
	CloseAndRecv() (*UserResponse, error)
	grpc.ClientStream
}

type userServiceGetUserInfo3Client struct {
	grpc.ClientStream
}

func (x *userServiceGetUserInfo3Client) Send(m *UserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceGetUserInfo3Client) CloseAndRecv() (*UserResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) GetUserInfo4(ctx context.Context, opts ...grpc.CallOption) (UserService_GetUserInfo4Client, error) {
	stream, err := grpc.NewClientStream(ctx, &_UserService_serviceDesc.Streams[2], c.cc, "/proto.UserService/GetUserInfo4", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetUserInfo4Client{stream}
	return x, nil
}

type UserService_GetUserInfo4Client interface {
	Send(*UserRequest) error
	Recv() (*UserResponse, error)
	grpc.ClientStream
}

type userServiceGetUserInfo4Client struct {
	grpc.ClientStream
}

func (x *userServiceGetUserInfo4Client) Send(m *UserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceGetUserInfo4Client) Recv() (*UserResponse, error) {
	m := new(UserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for UserService service

type UserServiceServer interface {
	GetUserInfo(context.Context, *UserRequest) (*UserResponse, error)
	GetUserInfo2(*UserRequest, UserService_GetUserInfo2Server) error
	GetUserInfo3(UserService_GetUserInfo3Server) error
	GetUserInfo4(UserService_GetUserInfo4Server) error
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserInfo(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserInfo2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).GetUserInfo2(m, &userServiceGetUserInfo2Server{stream})
}

type UserService_GetUserInfo2Server interface {
	Send(*UserResponse) error
	grpc.ServerStream
}

type userServiceGetUserInfo2Server struct {
	grpc.ServerStream
}

func (x *userServiceGetUserInfo2Server) Send(m *UserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_GetUserInfo3_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).GetUserInfo3(&userServiceGetUserInfo3Server{stream})
}

type UserService_GetUserInfo3Server interface {
	SendAndClose(*UserResponse) error
	Recv() (*UserRequest, error)
	grpc.ServerStream
}

type userServiceGetUserInfo3Server struct {
	grpc.ServerStream
}

func (x *userServiceGetUserInfo3Server) SendAndClose(m *UserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceGetUserInfo3Server) Recv() (*UserRequest, error) {
	m := new(UserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_GetUserInfo4_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).GetUserInfo4(&userServiceGetUserInfo4Server{stream})
}

type UserService_GetUserInfo4Server interface {
	Send(*UserResponse) error
	Recv() (*UserRequest, error)
	grpc.ServerStream
}

type userServiceGetUserInfo4Server struct {
	grpc.ServerStream
}

func (x *userServiceGetUserInfo4Server) Send(m *UserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceGetUserInfo4Server) Recv() (*UserRequest, error) {
	m := new(UserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _UserService_GetUserInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUserInfo2",
			Handler:       _UserService_GetUserInfo2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUserInfo3",
			Handler:       _UserService_GetUserInfo3_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetUserInfo4",
			Handler:       _UserService_GetUserInfo4_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "user.proto",
}

func init() { proto.RegisterFile("user.proto", fileDescriptor_user_8465edab245c7f12) }

var fileDescriptor_user_8465edab245c7f12 = []byte{
	// 203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x2d, 0x4e, 0x2d,
	0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x96, 0x5c, 0xdc, 0xa1, 0xc5,
	0xa9, 0x45, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x7c, 0x5c, 0x4c, 0x99, 0x29, 0x12,
	0x8c, 0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x4c, 0x99, 0x29, 0x42, 0x52, 0x5c, 0x1c, 0x20, 0x3d, 0x7e,
	0x89, 0xb9, 0xa9, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x70, 0xbe, 0x52, 0x1c, 0x17, 0x0f,
	0x44, 0x6b, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0x2a, 0x29, 0x7a, 0x85, 0x04, 0xb8, 0x98, 0x13, 0xd3,
	0x53, 0x25, 0x98, 0xc1, 0x8a, 0x41, 0x4c, 0x90, 0x48, 0x71, 0x6a, 0x85, 0x04, 0x0b, 0x44, 0xa4,
	0x38, 0xb5, 0xc2, 0xa8, 0x81, 0x09, 0xe2, 0xb6, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21,
	0x0b, 0x2e, 0x6e, 0xf7, 0xd4, 0x12, 0x90, 0x88, 0x67, 0x5e, 0x5a, 0xbe, 0x90, 0x10, 0xc4, 0x23,
	0x7a, 0x48, 0xce, 0x97, 0x12, 0x46, 0x11, 0x83, 0xb8, 0x4b, 0x89, 0x41, 0xc8, 0x9a, 0x8b, 0x07,
	0x49, 0xa7, 0x11, 0x09, 0x5a, 0x0d, 0x18, 0xd1, 0x34, 0x1b, 0x93, 0xa0, 0x59, 0x83, 0x51, 0xc8,
	0x16, 0x45, 0xb3, 0x09, 0x49, 0x9a, 0x0d, 0x18, 0x93, 0xd8, 0xc0, 0x32, 0xc6, 0x80, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x49, 0x0e, 0x35, 0x7a, 0xb9, 0x01, 0x00, 0x00,
}
